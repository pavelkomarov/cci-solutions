One
Because the int is unsigned, it will get decremented down to 0, then past zero, but it won't be -1, it will roll over to the max unsigned int. So the loop will go forever. And %d in printf is for signed decimal integers according to the documentation. You're supposed to use %u for unsigned int.

Two
It could be an internal source of randomness causing the random crashes. Is startup dependent on a random number, the time of day, or similar? It could be that some variable has been reserved in memory, but is not assigned a value before it's used, leading its value to be whatever garbage was leftover at that memory location from ealier processes. It could be that the program is taking up too much memory and overflowing to point to some other process' memory space. It could be that some dependency of the program has a similar problem causing it to randomly crash, which in turn causes our program to randomly crash. Finding the solutions to these kinds of bugs is witchcraft, requiring a lot of knowledge about the system. The solutions suggest elimination: Get rid of as many variables as possible, like other open programs or *this specific* machine (by running on another), and be very deliberate about everything we do with the program to see if there's a pattern, like it's crashing every time it needs to perform file io. That can dramatically narrow down our diagnosis. This type of troubleshooting can be maddening: Is it the hardware? Is it the software? I have a *journal of stupid mistakes* somewhere to document these kinds of things, and they often boil down to something unexpectedly minor and funny. The lesson is maybe to just keep going; you'll laugh at the pain eventually.

Three
I'd make sure that canMoveTo(x,y) is correct piece by piece, because all will have different movement patterns. I'd check that moves off the board are always illegal, as are ones with bad input. I'd check that pieces in the way of others block their movement correctly. I'd check special cases, like how a pawn can't usually move diagonally, unless it's taking something, en passant, promotion, castling, and check: You can't castle through check or if one of the two pieces involved has moved, and you must address a check by moving or blocking, which illegalizes many otherwise legal moves (unless blitz, in which case some times it's allowed to slide, and the opponent can take the king, unless they miss it!). You can't test every position, but positions are made up by combining fundamental elements, and it is possible to test the fundamentals in several ways until you're confident they're correct.

Four
A web page might experience heavy load by being accessed by many many clients. Or it could experience load if users access content that requires heavy server-side processing or script execution. So basically you need to DDoS your own server to see what its limits are, and keep track of how many clients are using the page vs processing delays. We're looking for bottlenecks in the system, its absolute throughput, etc.

Five
The pen will be used by humans, who hold and write with pens in an established way, so it should have a size and shape that fits various human hands comfortably. I might survey or solicit random new users to measure this. The pen should have enough ink to write for a good while, and it shouldn't be too runny or flaky. We can measure this by dragging its tip along long pieces of paper, lifting it in various patterns, and seeing how long it writes by distance and the quality of the line (blotchy, smooth, fine, thick, variable, consistent?). We can divide that distance by the average length of all the strokes a person might write in a day to figure out approximately how long the pen will last. We might want to consider that a person is likely to drop the pen or otherwise subject it to stress. Does it break under reasonable mechanical load? If it breaks, does ink go everywhere, or is there some mechanism to keep it from making a mess? Does the tip dry out if left in the air for too long? Pens are commonly lost, so how expensive is the pen to replace? What qualia does the pen have for writing? Is the stroke smooth or scratchy? Are we going for any particular feel here? If it's a caligraphy or fountain pen, does the stroke produce different-thickness lines when pulled across paper in different directions? If the pen is ball-point, then does the ball roll reliably, even after sitting in the air, while keeping the ink sealed in and wet?

Six
What do we need the ATM to do? Keep video, be locked and secure, take identifying info from people, communicate with the network or specify "out of service" if it can't connect, take and disburse cash, display what it wants to users, have convenient inputs/outputs for information. All this should be user-tested for intuitiveness and security. On the backend we need servers listening for communications from ATMs. We need a database of people's balances, debts, credit cards, addresses, etc. We need that information to be secure, so we probably need a lot of encryption going on between server and ATMs. We should have tests to ensure we can read and write from the database seamlessly and securely. These could likely be automated.
